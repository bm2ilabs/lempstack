#!/bin/bash

######################################################################
#           Auto Install & Optimize LEMP Stack on CentOS 7, 8        #
#                                                                    #
#                Author: Sanvv - HOSTVN Technical                    #
#                  Website: https://hostvn.vn                        #
#                                                                    #
#              Please do not remove copyright. Thank!                #
#  Please do not copy under any circumstance for commercial reason!  #
######################################################################

# shellcheck disable=SC2154
# shellcheck disable=SC1091
source /var/hostvn/menu/helpers/function

set_var(){
    #https://www.howtoforge.com/tutorial/linux-grep-command/
    #https://stackoverflow.com/a/6284370
    username=$(grep -w "username" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=')
    db_name=$(grep -w "db_name" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=')
}

backup_confirm(){
    while true
    do
        read -r -p "Do you want to backup your data before updating? (y/n) " promt_backup
        echo
        if [[ "${promt_backup}" =~ ^([yY])$ || "${promt_backup}" =~ ^([nN])$ ]];
        then
            break
        else
            printf "%s\n" "${RED}The value you entered is not correct. Please re-enter.${NC}"
        fi
    done
}

_backup(){
    cd_dir /home/"${username}"/"${domain}"
    if [[ ! -d "/home/backup/${CURRENT_DATE}/${domain}" ]]; then
        mkdir -p /home/backup/"${CURRENT_DATE}"/"${domain}"
    fi
    if [[ -f "/home/backup/${CURRENT_DATE}/${domain}/${domain}.tar.gz" ]]; then
        rm -rf /home/backup/"${CURRENT_DATE}"/"${domain}"/"${domain}".tar.gz
    fi
    tar -cpzvf /home/backup/"${CURRENT_DATE}"/"${domain}"/"${domain}".tar.gz public_html --exclude "public_html/wp-content/cache"

    cd_dir /home/"${username}"/"${domain}"/public_html
    if [[ -f "/home/backup/${CURRENT_DATE}/${domain}/${db_name}.sql" ]]; then
        rm -rf /home/backup/"${CURRENT_DATE}"/"${domain}"/"${db_name}".sql
    fi
    wp db export --allow-root /home/backup/"${CURRENT_DATE}"/"${domain}"/"${db_name}".sql.gz
}

_update_wp(){
    cd_dir /home/"${username}"/"${domain}"/public_html
    wp core update --allow-root
    chown -R "${username}":"${username}" ./*
}

_run(){
    set_var
    check_is_wordpress "${username}" "${domain}"

    if [ -z "${ALERT}" ]; then
        backup_confirm
        if [[ "${promt_backup}" =~ ^([yY])$ ]];then
            make_backup_dir "${domain}"
            _backup
        fi
        _update_wp
        restart_service
        clear
        printf "%s\n" "${GREEN}Update WordPress success.${NC}"
    else
        clear
        printf "%s\n" "${ALERT}"
    fi
}

ALERT=""
domain=""
promt_backup=""
select_domain
if [ -n "${domain}" ]; then
    _run
else
    clear
    printf "%s\n" "${RED}You have chosen to cancel the action${NC}"
fi

menu_wp