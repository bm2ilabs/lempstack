#!/bin/bash

######################################################################
#           Auto Install & Optimize LEMP Stack on CentOS 7, 8        #
#                                                                    #
#                Author: Sanvv - HOSTVN Technical                    #
#                  Website: https://hostvn.vn                        #
#                                                                    #
#              Please do not remove copyright. Thank!                #
#  Please do not copy under any circumstance for commercial reason!  #
######################################################################

# shellcheck disable=SC2154
# shellcheck disable=SC2034
source /var/hostvn/menu/helpers/function

set_var(){
    #https://www.howtoforge.com/tutorial/linux-grep-command/
    #https://stackoverflow.com/a/6284370
    promtp_install="n"
    username=$(grep -w "username" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=');
    php_mode="$(grep "php_mode" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=')"
    db_name=$(grep -w "db_name" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=');
    db_pass=$(grep -w "db_password" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=');
    db_user=$(grep -w "db_user" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=');
}

docroot_empty(){
    if check_docroot_empty "$username" "$domain";
    then
        while true
        do
            read -r -p "The public_html directory is having data. Do you want to delete data? (y/n) " promtp_install
            echo
            if [[ "${promtp_install}" =~ ^([yY])$  || "${promtp_install}" =~ ^([nN])$ ]];
            then
                break
            else
                printf "%s\n" "${RED}Your choose was not correct. Please re-enter.${NC}"
            fi
        done
    else
        while true
        do
            read -r -p "Do you want to install WordPress automatically? (y/n) " promtp_install
            echo
            if [[ "${promtp_install}" =~ ^([yY])$ || "${promtp_install}" =~ ^([nN])$ ]];
            then
                break
            else
                printf "%s\n" "${RED}Your choose was not correct. Please re-enter.${NC}"
            fi
        done
    fi
}

database_empty(){
    if if_db_not_empty "${db_name}"; then
        promtp_install="y"
    else
        while true
        do
            read -r -p "Database is having data. Do you want to delete existing data? (y/n) " promtp_install
            echo
            if [[ "${promtp_install}" =~ ^([yY])$ || "${promtp_install}" =~ ^([nN])$ ]];
            then
                break
            else
                printf "%s\n" "${RED}Your choose was not correct. Please re-enter.${NC}"
            fi
        done
    fi
}

auto_install(){
    cd_dir "/home/${username}/${domain}/public_html"
    # Download WordPress
    wp core download --locale=en_US --allow-root
    rm -rf license.txt readme.html
    # Create wp-config.php
    db_prefix=$(< /dev/urandom tr -dc '[:lower:]' | head -c"${1:-4}";echo;)
    wp config create --allow-root --dbname="${db_name}" --dbuser="${db_user}" --dbpass="${db_pass}" --dbprefix="${db_prefix}_" --extra-php <<PHP
define( 'WP_DEBUG', false );
define( 'WP_DEBUG_LOG', false );
define( 'WP_CACHE', true);
PHP
    # Install WordPress
    wp core install --url="${domain}" --title="${site_name}" --admin_user="${admin_user}" --admin_password="${admin_pwd}" --admin_email="${admin_email}" --allow-root
    # Create robots.txt
    cat > "/home/$username/$domain/public_html/robots.txt" <<END
User-agent: *
Disallow: /wp-admin/
Disallow: /wp-includes/
Disallow: /search?q=*
Disallow: *?replytocom
Disallow: */attachment/*
Disallow: /images/
Allow: /wp-admin/admin-ajax.php
Allow: /*.js$
Allow: /*.css$
END
    chown -R "${username}":"${username}" ./*
}

update_user_info(){
    sed -i '/plugin_cache=/d' "${USER_DIR}"/."${domain}".conf
    sed -i '/username=/d' "${USER_DIR}"/."${domain}".conf
    sed -i '/db_name=/d' "${USER_DIR}"/."${domain}".conf
    {
        echo "plugin_cache=${plugin_cache}"
        echo "username=${username}"
        echo "db_name=${db_name}"
    } >>  "${USER_DIR}"/."${domain}".conf
}

create_vhost(){
    if [[ -f "/etc/nginx/backup_vhost/${domain}.conf.orig" ]]; then
        rm -rf /etc/nginx/backup_vhost/"${domain}".conf.orig
    fi

    mv "/etc/nginx/conf.d/$domain.conf" "/etc/nginx/backup_vhost/${domain}.conf.orig"
    fastcgi

    cat >> "${VHOST_DIR}/${domain}.conf" << END
upstream php-${username} {
    server ${fastcgi_pass}
}

server {
    listen 80;
    server_name ${domain} www.${domain};

    #access_log off;
    #access_log /home/${username}/${domain}/logs/access.log;
    #error_log off;
    error_log /home/${username}/${domain}/logs/error.log;
    root /home/${username}/${domain}/public_html;
    index index.php index.html index.htm;

    include /etc/nginx/rewrite/wordpress.conf;

    location ~ \.php\$ {
        try_files \$uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)\$;
        fastcgi_index index.php;
        include /etc/nginx/fastcgi_params;
        include /etc/nginx/extra/nginx_limits.conf;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        if (-f \$request_filename)
        {
            fastcgi_pass php-${username};
        }
    }

    location = /wp-login.php {
        limit_req zone=two burst=1 nodelay;
        include /etc/nginx/fastcgi_params;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        fastcgi_pass php-${username};
    }
    include /etc/nginx/extra/staticfiles.conf;
    include /etc/nginx/wordpress/wordpress_secure.conf;
    include /etc/nginx/wordpress/disable_xmlrpc.conf;
    include /etc/nginx/extra/security.conf;
}
END

}

show_info(){
    echo ""
    printf "1. User is logged in wp-admin    : %s\n" "${admin_user}"
    printf "2. Wp-admin login password: %s\n" "${admin_pwd}"
    echo   "------------------------------------"
}

_run(){
    set_var
    docroot_empty
    if [[ "${promtp_install}" =~ ^([yY])$ ]]; then
        database_empty
    fi

    if [[ "${promtp_install}" =~ ^([yY])$ ]]; then
        if ! if_mysql_user_exists "${db_user}"; then
            ALERT=$(printf "%s\n" "${RED}Mysql User does not exist.${NC}")
        fi

        if ! if_db_exists "${db_name}"; then
            ALERT=$(printf "%s\n" "${RED}Database does not exist.${NC}")
        fi

        if [ -z "${ALERT}" ]; then
            wp_auto_install_info
            rm -rf /home/"$username"/"$domain"/public_html/*
            empty_db
            auto_install "$@"
            clear

            create_vhost
            restart_service
            clear
            printf "%s\n" "${GREEN}Install WordPress success.${NC}"
            show_info
        else
            clear
            printf "%s\n" "${ALERT}"
        fi
    else
        clear
        printf "%s\n" "${RED}You have Canceled WordPress automatic installation.${NC}"
    fi
}

ALERT=""
domain=""
promtp_install=""
select_domain

if [ -n "${domain}" ]; then
    _run "$@"
else
    clear
    printf "%s\n" "${RED}You have chosen to cancel the action${NC}"
fi

menu_wp