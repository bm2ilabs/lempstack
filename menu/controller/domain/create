#!/bin/bash

######################################################################
#           Auto Install & Optimize LEMP Stack on CentOS 7, 8        #
#                                                                    #
#                Author: Sanvv - HOSTVN Technical                    #
#                  Website: https://hostvn.vn                        #
#                                                                    #
#              Please do not remove copyright. Thank!                #
#  Please do not copy under any circumstance for commercial reason!  #
######################################################################

# shellcheck disable=SC2154
# shellcheck disable=SC1091
source /var/hostvn/menu/helpers/function
# shellcheck disable=SC1091
source /var/hostvn/menu/helpers/variable_php

printf "%s===============%s\n" "${GREEN}" "${NC}"
printf "%sAdd a new domain%s\n" "${GREEN}" "${NC}"
printf "%s===============%s\n" "${GREEN}" "${NC}"
echo ""

input(){
    false
    while [ $? -eq 1 ]
    do
        read -r -p "Enter domain (No www)[0 = Exit]: " domain
        if [ "${domain}" == "0" ]; then
            domain=0
            break
        else
            domain=$(echo "${domain}" | tr '[:upper:]' '[:lower:]')
            echo "${domain}" | grep -q "\."
            if [ $? -eq 0 ]; then
                "${BASH_DIR}"/menu/validate/check_value domain "${domain}"
                if [[ $? -eq 1 ]]; then
                    clear
                    printf "%s\n" "${RED}The name you entered is not correct, please re-enter.${NC}"
                    false
                fi
            else
                clear
                printf "%s\n" "${RED}The name you entered is not correct, please re-enter.${NC}"
                false
            fi
        fi
    done
}

# Set variables
set_var(){
    pureftpd_status="$(pgrep -f pure-ftpd)"
    username=${domain//[-._]/}
    username="${username}$(< /dev/urandom tr -dc 0-9 | head -c4)"
    prefix=$(< /dev/urandom tr -dc '[:lower:]' | head -c"${1:-3}";echo;)
    db_user=$(echo "${username}"_"${prefix}" | tr '[:upper:]' '[:lower:]')
    db_name=$(echo "${prefix}"_"${username}" | tr '[:upper:]' '[:lower:]')
    db_pass=$(gen_pass "$@")
    php_mode="1"
    wp_secure=""
    xmlrpc=""
    brute=""
}

validate(){
    check_domain_exists "${domain}"
    check_database "${db_name}"
    check_mysql_user "${db_user}"
}

set_php_version(){
    php1="${php1_version}"
    php2=${php2_version}
}

select_php(){
    set_php_version

    echo "Choose the PHP version you want to use"
    PS3='Enter your choice (1-2): '
    options=("${php1}" "${php2}" "Cancel")
    select opt in "${options[@]}"
    do
        case $opt in
            "${php1}") php_mode="1"; break;;
            "${php2}") php_mode="2"; break;;
            "Cancel") php_mode="0"; break;;
            *) printf "%s\n" "${RED}You entered incorrectly, please re-enter.${NC}";;
        esac
    done
}

wp_auto_install_confirm(){
    promtp_inst_wp="n"
    echo "Do you want to complete a new WordPress installation?"
    PS3='Enter your choice (1-2): '
    options=("Yes" "No")
    select opt in "${options[@]}"
    do
        case $opt in
            "Yes") promtp_inst_wp="y"; break;;
            "No") promtp_inst_wp="n"; break;;
            *) printf "%s\n" "${RED}You entered incorrectly, please re-enter.${NC}";;
        esac
    done
}

wp_auto_install(){
    if [[ "${promtp_inst_wp}" =~ ^([yY])$ ]]; then
        wp_auto_install_info
        cd_dir "/home/${username}/${domain}/public_html"

        # Download WordPress
        wp core download --locale=en_US --allow-root
        rm -rf license.txt readme.html

        # Create wp-config.php
        db_prefix=$(< /dev/urandom tr -dc '[:lower:]' | head -c"${1:-4}";echo;)

        wp config create --allow-root --dbname="${db_name}" --dbuser="${db_user}" --dbpass="${db_pass}" --dbprefix="${db_prefix}_" --extra-php <<PHP
define( 'WP_DEBUG', false );
define( 'WP_DEBUG_LOG', false );
define( 'FS_METHOD', 'direct');
define( 'WP_CACHE', true);
PHP

        # Install WordPress
        wp core install --url="${domain}" --title="${site_name}" --admin_user="${admin_user}" --admin_password="${admin_pwd}" --admin_email="${admin_email}" --allow-root

        # Create robots.txt
        cat > "/home/$username/$domain/public_html/robots.txt" <<END
User-agent: *
Disallow: /wp-admin/
Disallow: /wp-includes/
Disallow: /search?q=*
Disallow: *?replytocom
Disallow: */attachment/*
Disallow: /images/
Allow: /wp-admin/admin-ajax.php
Allow: /*.js$
Allow: /*.css$
END
    fi
}

# Create
create_user(){
    if ! if_user_exists "${username}";
    then
        useradd -r --shell /sbin/nologin "${username}"
    fi
}

create_ftp(){
    user_pass=$(gen_pass "$@")
    if [[ -f "/etc/pure-ftpd/pureftpd.passwd" ]]; then
        if if_pureftpd_user_exists "${username}";
        then
            pure-pw passwd "${username}" <<EOF
${user_pass}
${user_pass}
EOF
            pure-pw mkdb
        else
            pure-pw useradd "${username}" -u "${username}" -g "${username}" -d /home/"${username}" <<EOF
${user_pass}
${user_pass}
EOF
            pure-pw mkdb
        fi
    else
        pure-pw useradd "${username}" -u "${username}" -g "${username}" -d /home/"${username}" <<EOF
${user_pass}
${user_pass}
EOF
        pure-pw mkdb
    fi
}

create_db(){
    Q1="CREATE DATABASE IF NOT EXISTS ${db_name};"
    Q2="GRANT ALL ON ${db_name}.* TO '${db_user}'@'localhost' IDENTIFIED BY '${db_pass}';"
    Q3="FLUSH PRIVILEGES;"
    SQL="${Q1}${Q2}${Q3}"

    mysql -uroot -e "${SQL}"
}

create_docrot(){
    mkdir -p /home/"${username}"/"${domain}"/public_html
    mkdir -p /home/"${username}"/"${domain}"/logs
    chmod 711 /home
    chmod 711 /home/"${username}"
    chmod 711 /home/"${username}"/"${domain}"
    chmod 711 /home/"${username}"/"${domain}"/logs
    chmod 755 /home/"${username}"/"${domain}"/public_html
    chcon -Rt httpd_sys_content_t /home/"${username}"/"${domain}"/public_html
}

set_owner(){
    chown -R "${username}":"${username}" /home/"${username}"
}

set_phpconf_var(){
    php_conf_file="/etc/php-fpm.d/${domain}.conf"
    listen="/var/run/php-fpm/${username}.sock;"
    slowlog="/var/log/php-fpm/${domain}-slow.log"
    error_log="/var/log/php-fpm/${domain}-error.log"
    tmp_dir="/home/${username}/tmp"
    session_path="/home/${username}/php/session"
    wsdl_cache_dir="/home/${username}/php/wsdlcache"
    open_basedir="/home/${username}/:/dev/urandom:/usr/share/php/:/dev/shm"

    if [[ "${php2_release}" == "yes" && "${php_mode}" == "2" ]]; then
        php_conf_file="/etc/opt/remi/${php2_version}/php-fpm.d/${domain}.conf"
        listen="/opt/remi/${php2_version}/root/var/run/php-fpm/${username}.sock"
        open_basedir="/home/${username}/:/dev/urandom:/opt/remi/${php2_version}/root/usr/share/php/:/dev/shm"

        if [[ "${php2_version}" == "php56" ]]; then
            php_conf_file="/opt/remi/${php2_version}/root/etc/php-fpm.d/${domain}.conf"
        fi
    fi

    mkdir -p "${tmp_dir}"
    mkdir -p "${session_path}"
    mkdir -p "${wsdl_cache_dir}"
    chmod 700 "${session_path}"
    chmod 700 "${wsdl_cache_dir}"
}

create_phpconfig(){
    set_phpconf_var
    php_parameter
    cat > "${php_conf_file}" << END
[${username}]
listen = ${listen}
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = ${username}
listen.group = nginx
listen.mode = 0660
user = ${username}
group = ${username}
pm = dynamic
pm.max_children = ${PM_MAX_CHILDREN}
pm.start_servers = ${PM_START_SERVERS}
pm.min_spare_servers =  ${PM_MIN_SPARE_SERVER}
pm.max_spare_servers = ${PM_MAX_SPARE_SERVER}
pm.max_requests = ${PM_MAX_REQUEST}
request_terminate_timeout = 300
rlimit_files = 65536
rlimit_core = 0
;slowlog = ${slowlog}
chdir = /
env[TMP] = ${tmp_dir}
env[TMPDIR] = ${tmp_dir}
env[TEMP] = ${tmp_dir}
php_admin_value[error_log] = ${error_log}
php_admin_flag[log_errors] = on
php_value[session.save_handler] = files
php_value[session.save_path]    = ${session_path}
php_value[soap.wsdl_cache_dir]  = ${wsdl_cache_dir}
php_admin_value[disable_functions] = exec,system,passthru,shell_exec,dl,show_source,posix_kill,posix_mkfifo,posix_getpwuid,posix_setpgid,posix_setsid,posix_setuid,posix_setgid,posix_seteuid,posix_setegid,posix_uname
php_admin_value[upload_tmp_dir] = ${tmp_dir}
php_admin_value[open_basedir] = ${open_basedir}
security.limit_extensions = .php
END
}

set_docroot(){
    if [[ "${SOURCE}" == "laravel" ]]; then
        root="root /home/${username}/${domain}/public_html/public;"
    else
        root="root /home/${username}/${domain}/public_html;"
    fi
}

create_vhost(){
    set_rewrite
    fastcgi
    set_docroot

    cat >> "${VHOST_DIR}/${domain}.conf" << END
upstream php-${username} {
    server ${fastcgi_pass}
}

server {
    listen 80;
    server_name ${domain} www.${domain};

    #access_log off;
    #access_log /home/${username}/${domain}/logs/access.log;
    #error_log off;
    error_log /home/${username}/${domain}/logs/error.log;
    ${root}
    index index.php index.html index.htm;

    ${rewrite}

    location ~ \.php\$ {
        try_files \$uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)\$;
        fastcgi_index index.php;
        include /etc/nginx/fastcgi_params;
        include /etc/nginx/extra/nginx_limits.conf;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        if (-f \$request_filename)
        {
            fastcgi_pass php-${username};
        }
    }
    ${brute}
    include /etc/nginx/extra/staticfiles.conf;
    include /etc/nginx/extra/security.conf;
    ${wp_secure}
    ${xmlrpc}
}
END
}

save_user_config(){
    php_ver=${php1_version}

    if [[ "${php_mode}" == "2" ]]; then
        php_ver="${php2_version}"
        php_mode="2"
    fi

    cat > "${USER_DIR}/.${domain}.conf" <<END
[${domain}]
username=${username}
user_pass=${user_pass}
domain=${domain}
db_name=${db_name}
db_user=${db_user}
db_password=${db_pass}
public_html=/home/${username}/${domain}/public_html
plugin_cache=${plugin_cache}
php_mode=${php_mode}
php_version=${php_ver}
plugins_seo=${plugins_seo}
END
    chmod 600 "${USER_DIR}"/."${domain}".conf
}

show_info(){
    clear
    echo ""
    printf "You have created domain success. Save the information for use\n"
    echo   "---------------------------------------------------------------"
    printf "* Domain                     : %s\n" "${domain}"
    printf "* DB_Name                    : %s\n" "${db_name}"
    printf "* DB_User                    : %s\n" "${db_user}"
    printf "* DB_Password                : %s\n" "${db_pass}"
    if [ -n "${pureftpd_status}" ]; then
    printf "* Username (FTP)             : %s\n" "${username}"
    printf "* Password (FTP)             : %s\n" "${user_pass}"
    printf "* FTP Host                   : %s\n" "${IPADDRESS}"
    printf "* FTP Port                   : 21\n"
    fi
    printf "* Public_html                : %s\n" "/home/${username}/${domain}/public_html"
    if [ "${promtp_inst_wp}" = "y" ]; then
    printf "* User login wp-admin    : %s\n" "${admin_user}"
    printf "* Login registration wp-admin: %s\n" "${admin_pwd}"
    fi
    echo   "---------------------------------------------------------------"
}

_run(){
    validate

    if [ -z "${ALERT}" ]; then
        select_source
        create_docrot
        create_db
        create_phpconfig
        create_user

        if [ -n "${pureftpd_status}" ]; then
            create_ftp "$@"
        fi

        if [[ "${SOURCE}" == "wordpress" ]]; then
            clear
            wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
            xmlrpc="include /etc/nginx/wordpress/disable_xmlrpc.conf;"
            brute_force_wp "${username}"
            wp_auto_install_confirm
            wp_auto_install "$@"
        fi

        create_vhost
        set_owner
        save_user_config
        restart_service
        clear
        show_info
    else
        clear
        printf "%s\n" "${ALERT}"
    fi
}

ALERT=""
domain=""

check_service

if [ -z "${ALERT}" ]; then
    input
    #domain="${domain}" ; echo ${domain//" "/""}
    if [ "${domain}" == "0" ]; then
        clear
    else
        set_var "$@"
        if [[ "${php2_release}" == "yes" ]]; then
            select_php
        fi
        if [ "${php_mode}" == "0" ]; then
            clear
        else
            _run "$@"
            echo ""
        fi
    fi
else
    clear
    printf "%s\n" "${ALERT}"
fi

menu_domain