#!/bin/bash

######################################################################
#           Auto Install & Optimize LEMP Stack on CentOS 7, 8        #
#                                                                    #
#                Author: Sanvv - HOSTVN Technical                    #
#                  Website: https://hostvn.vn                        #
#                                                                    #
#              Please do not remove copyright. Thank!                #
#  Please do not copy under any circumstance for commercial reason!  #
######################################################################

# shellcheck disable=SC2154
# shellcheck disable=SC2034

valid_number(){
    REGEX_NUMBER='^[0-9]+$'
    if [[ ${1} =~ ${REGEX_NUMBER} ]]; then
        return 0
    else
        return 1
    fi
}

valid_date(){
    if [[ ${1} =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
        return 0
    else
        return 1
    fi
}

check_service(){
    nginx="$(pgrep -f nginx)"
    phpfpm="$(pgrep -f php-fpm)"
    mariadb="$(pgrep -f mariadb)"

    if [ -z "${nginx}" ]; then
        nginx_status="${RED}Inactive${NC}"
    fi

    if [ -z "${phpfpm}" ]; then
        phpfpm_status="${RED}Inactive${NC}"
    fi

    if [ -z "${mariadb}" ]; then
        mariadb_status="${RED}Inactive${NC}"
    fi

    if [[  -z "${nginx}" || -z "${phpfpm}" || -z "${mariadb}" ]]; then
        ALERT=$(
            printf "%s%s%s\n" "${RED}" "${ERROR_OCCURRED}" "${NC}"
            printf "%s%s%s\n" "${RED}" "${CHECK_SERVICES}" "${NC}"
            echo "-------------------------------------------------"
            printf "Nginx: %s\n" "${nginx_status}";
            printf "PHP-FPM: %s\n" "${phpfpm_status}";
            printf "MariaDB: %s\n" "${mariadb_status}";
            echo "-------------------------------------------------"
        )
    fi
}

validate_domain(){
    if [[ ${1} =~ [A-Za-z0-9-]+(\.[A-Za-z0-9-]+)*(\.[A-Za-z]{2,}) ]]; then
        return 0
    else
        return 1
    fi
}

check_domain_exists(){
    if [[ -f "${USER_DIR}/.${1}.conf" || -f "${VHOST_DIR}/${1}.conf" ]]; then
        ALERT=$(
                    printf "%s\n" "${RED}${DOMAIN_EXISTS1}${NC}"
                    printf "%s\n" "${RED}${DOMAIN_EXISTS2}${NC}"
                )
    fi
}

if_domain_exists(){
    if [[ -f "${USER_DIR}/.${1}.conf" || -f "${VHOST_DIR}/${1}.conf" ]]; then
        return 0
    else
        return 1
    fi
}

# Check name: only accept [a-z] [A-Z] [0-9] - _
validate_user(){
    LEN=${#1}
    TRAP=$(echo "${1}" | tr -d "_-" | tr -d "[:alnum:]")
    if [[ -z "${TRAP}" && ${LEN} -ge 5 ]] && ! valid_number "$1"; then
        return 0
    else
        return 1
    fi
}

if_user_exists(){
    RESULT_USER=$(grep -c "^${1}:" /etc/passwd)
    if [ "${RESULT_USER}" != 0 ]; then
        return 0
    else
        return 1
    fi
}

if_pureftpd_user_exists(){
    RESULT_FTP_USER=$(grep -c "${1}" "/etc/pure-ftpd/pureftpd.passwd")
    if [[ "${RESULT_FTP_USER}" != 0 ]]; then
        return 0
    else
        return 1
    fi
}

check_database(){
    RESULT_DB=$(mysqlshow "${1}" | grep -v Wildcard | grep -o "${1}")
    if [ "$RESULT_DB" == "${1}" ]; then
        ALERT=$(
                    printf "%s\n" "${RED}${DATABASE_EXISTS}${NC}"
                    printf "%s\n" "${RED}${DOMAIN_EXISTS2}${NC}"
                )
    fi
}

if_db_exists(){
    RESULT_DB=$(mysqlshow "${1}" | grep -v Wildcard | grep -o "${1}")
    if [ "$RESULT_DB" == "${1}" ]; then
        return 0
    else
        return 1
    fi
}

if_db_not_empty(){
    COUNT_TABLE=$(mysql -e "SELECT CASE COUNT(*) WHEN '0' THEN 'empty' ELSE 'not empty' END AS contents FROM information_schema.tables
                                WHERE table_type = 'BASE TABLE' AND table_schema = '${1}';" | grep "empty")
    if [ "${COUNT_TABLE}" == "empty" ]; then
        return 0
    else
        return 1
    fi
}

check_mysql_user(){
    RESULT_MYSQL_USER="$(mysql -sse "SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = '${1}')")"
    if [ "${RESULT_MYSQL_USER}" = 1 ]; then
        ALERT=$(
                    printf "%s\n" "${RED}${MYSQL_USER_EXISTS}${NC}"
                    printf "%s\n" "${RED}${DOMAIN_EXISTS2}${NC}"
                )
    fi
}

if_mysql_user_exists(){
    RESULT_MYSQL_USER="$(mysql -sse "SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = '${1}')")"
    if [ "${RESULT_MYSQL_USER}" = 1 ]; then
        return 0
    else
        return 1
    fi
}

check_nginx_status(){
    nginx="$(pgrep -f nginx)"

    if [ -z "${nginx}" ]; then
        ALERT=$(printf "%s\n" "${RED}${NGINX_NO_WORK}${NC}")
    fi
}

check_a_record(){
    a_record=$(dig -4 +nocomments @8.8.8.8 +short A "${1}")

    if [[ "${a_record}" != "${IPADDRESS}" ]]; then
        ALERT=$(
            printf "%s\n" "${RED}${DNS_FAIL1}${NC}"
            printf "%s\n" "${RED}${DNS_FAIL2}${NC}"
        )
    fi
}

check_www_record(){
    www_record=$(dig -4 +nocomments @8.8.8.8 +short A www."${1}")

    if [[ "${www_record}" != "${IPADDRESS}" ]]; then
        return 1
    else
        return 0
    fi
}

check_le_exists(){
    if [ ! -d "/etc/letsencrypt/live/${1}" ]; then
        ALERT=$(printf "%s\n" "${RED}${LE_NO_EXISTS}${NC}")
    fi
}

check_is_wordpress(){
    if [ ! -d "/home/${1}/${2}/public_html/wp-content" ]; then
        ALERT=$(printf "%s\n" "${RED}${NO_WP}${NC}")
    fi
}

if_is_wordpress(){
    if [ -d "/home/${1}/${2}/public_html/wp-content" ]; then
        return 0
    else
        return 1
    fi
}

check_backup_exists(){
    if [ -d "/home/backup/${1}/${2}" ]; then
        return 0
    else
        return 1
    fi
}

check_backup_empty(){
    #https://www.cyberciti.biz/faq/linux-unix-shell-check-if-directory-empty/
    if [ "$(ls -A /home/backup/"${1}"/"${2}")" ]; then
        return 0
    else
        return 1
    fi
}

check_docroot_empty(){
    #https://www.cyberciti.biz/faq/linux-unix-shell-check-if-directory-empty/
    if [ "$(ls -A /home/"${1}"/"${2}"/public_html)" ]; then
        return 0
    else
        return 1
    fi
}

check_wpconfig(){
    if [[ ! -f "/home/${1}/${2}/public_html/wp-config.php" ]]; then
        ALERT=$(printf "%s\n" "${RED}${WPCONFIG_NOT_EXISTS}${NC}")
    fi
}

service_exists() {
    local n=$1
    if [[ $(systemctl list-units --all -t service --full --no-legend "$n.service" | cut -f1 -d' ') == $n.service ]]; then
        return 0
    else
        return 1
    fi
}

check_port_exists(){
    check_port=$(netstat -vatn | grep "${1}")
    if [ -n "${check_port}" ]; then
        return 0
    else
        return  1
    fi
}